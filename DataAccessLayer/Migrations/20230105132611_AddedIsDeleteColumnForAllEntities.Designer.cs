// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230105132611_AddedIsDeleteColumnForAllEntities")]
    partial class AddedIsDeleteColumnForAllEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.Cast", b =>
                {
                    b.Property<int>("CastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CastId"));

                    b.Property<string>("CastNameSurname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("CastId");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CastTitle", b =>
                {
                    b.Property<int>("CastTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CastTitleId"));

                    b.Property<int>("CastId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("CastTitleId");

                    b.HasIndex("CastId");

                    b.HasIndex("TitleId");

                    b.ToTable("CastTitles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommunicationSetting", b =>
                {
                    b.Property<int>("CommunicationSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunicationSettingId"));

                    b.Property<string>("CommunicationSettingExplanation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommunicationSettingName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("CommunicationSettingId");

                    b.ToTable("CommunicationSettings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<string>("ContentName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MaturityRatingId")
                        .HasColumnType("int");

                    b.HasKey("ContentId");

                    b.HasIndex("MaturityRatingId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ContentCastTitle", b =>
                {
                    b.Property<int>("ContentCastTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentCastTitleId"));

                    b.Property<int>("CastTitleId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("ContentCastTitleId");

                    b.HasIndex("CastTitleId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentCastTitles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CreditCard", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditCardId"));

                    b.Property<string>("CreditCardHolder")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CreditCardNo")
                        .HasColumnType("int");

                    b.Property<byte>("Cvv")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CreditCardId");

                    b.HasIndex("UserId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Font", b =>
                {
                    b.Property<int>("FontId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FontId"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("FontName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("FontId");

                    b.HasIndex("ColorId");

                    b.ToTable("Fonts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("EntityLayer.Concrete.GenreContent", b =>
                {
                    b.Property<int>("GenreContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreContentId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("GenreContentId");

                    b.HasIndex("ContentId");

                    b.HasIndex("GenreId");

                    b.ToTable("GenreContents");
                });

            modelBuilder.Entity("EntityLayer.Concrete.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"));

                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceExplanation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("CreditCardId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MaturityRating", b =>
                {
                    b.Property<int>("MaturityRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaturityRatingId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MaturityExplanation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MaturityRatingId");

                    b.ToTable("MaturityRatings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Packet", b =>
                {
                    b.Property<int>("PacketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacketId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PacketContentQuality")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PacketExplanation")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PacketName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("PacketPrice")
                        .HasColumnType("real");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("PacketId");

                    b.ToTable("Packets");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PlaybackSetting", b =>
                {
                    b.Property<int>("PlaybackSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaybackSettingId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PlaybackSettingExplanation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlaybackSettingName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PlaybackSettingId");

                    b.ToTable("PlaybackSettings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<bool>("IsAnimationTv")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMarketingApproval")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MaturityRatingId")
                        .HasColumnType("int");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProfilePin")
                        .HasColumnType("int");

                    b.Property<int>("SubtitleAppearanceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MaturityRatingId");

                    b.HasIndex("SubtitleAppearanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfileCommunicationSetting", b =>
                {
                    b.Property<int>("ProfileCommunicationSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileCommunicationSettingId"));

                    b.Property<int>("CommunicationSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("ProfileCommunicationSettingSelection")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("ProfileCommunicationSettingId");

                    b.HasIndex("CommunicationSettingId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileCommunicationSettings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfileContent", b =>
                {
                    b.Property<int>("ProfileContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileContentId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("ProfileContentId");

                    b.HasIndex("ContentId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileContents");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfilePlaybackSetting", b =>
                {
                    b.Property<int>("ProfilePlaybackSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfilePlaybackSettingId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("PlaybackPlaybackSelection")
                        .HasColumnType("bit");

                    b.Property<int>("PlaybackSettingId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("ProfilePlaybackSettingId");

                    b.HasIndex("PlaybackSettingId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfilePlaybackSettings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfileVideoRating", b =>
                {
                    b.Property<int>("ProfileVideoRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileVideoRatingId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("ProfileVideoRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("ProfileVideoRatingId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("VideoId");

                    b.ToTable("ProfileVideoRatings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfileVideoWatching", b =>
                {
                    b.Property<int>("ProfileVideoWatchingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileVideoWatchingId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProfileVideoDateOfWached")
                        .HasColumnType("datetime2");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("ProfileVideoWatchingId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("VideoId");

                    b.ToTable("ProfileVideoWatchings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Shadow", b =>
                {
                    b.Property<int>("ShadowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShadowId"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ShadowName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ShadowId");

                    b.HasIndex("ColorId");

                    b.ToTable("Shadows");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Style", b =>
                {
                    b.Property<int>("StyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StyleId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("StyleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StyleId");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StyleContent", b =>
                {
                    b.Property<int>("StyleContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StyleContentId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.HasKey("StyleContentId");

                    b.HasIndex("ContentId");

                    b.HasIndex("StyleId");

                    b.ToTable("StyleContents");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SubtitleAppearance", b =>
                {
                    b.Property<int>("SubtitleAppearanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubtitleAppearanceId"));

                    b.Property<int>("BackgroundColorId")
                        .HasColumnType("int");

                    b.Property<int>("FontId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ShadowId")
                        .HasColumnType("int");

                    b.Property<int>("TextSizeId")
                        .HasColumnType("int");

                    b.Property<int>("WindowColorId")
                        .HasColumnType("int");

                    b.HasKey("SubtitleAppearanceId");

                    b.HasIndex("FontId");

                    b.HasIndex("ShadowId");

                    b.HasIndex("TextSizeId");

                    b.ToTable("SubtitleAppearances");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TextSize", b =>
                {
                    b.Property<int>("TextSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TextSizeId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("TextSizeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("TextSizeId");

                    b.ToTable("TextSizes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("TitleId");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TypeContent", b =>
                {
                    b.Property<int>("TypeContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeContentId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("TypeContentId");

                    b.HasIndex("ContentId");

                    b.HasIndex("TypeId");

                    b.ToTable("TypeContents");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AccessPin")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId");

                    b.HasIndex("PacketId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<byte>("EpisodeNo")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("SeasonNo")
                        .HasColumnType("tinyint");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VideoId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContentId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("EntityLayer.Concrete.VideoLanguage", b =>
                {
                    b.Property<int>("VideoLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoLanguageId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("VideoLanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoLanguages");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CastTitle", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Cast", "Cast")
                        .WithMany("CastTitles")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Title", "Title")
                        .WithMany("CastTitles")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Content", b =>
                {
                    b.HasOne("EntityLayer.Concrete.MaturityRating", "MaturityRating")
                        .WithMany("Contents")
                        .HasForeignKey("MaturityRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaturityRating");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ContentCastTitle", b =>
                {
                    b.HasOne("EntityLayer.Concrete.CastTitle", "CastTitle")
                        .WithMany("ContentCastTitles")
                        .HasForeignKey("CastTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Content", "Content")
                        .WithMany("ContentCastTitles")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CastTitle");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CreditCard", b =>
                {
                    b.HasOne("EntityLayer.Concrete.User", "User")
                        .WithMany("CreditCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Font", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Color", "Color")
                        .WithMany("Fonts")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("EntityLayer.Concrete.GenreContent", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Content", "Content")
                        .WithMany("GenreContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Genre", "Genre")
                        .WithMany("GenreContents")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("EntityLayer.Concrete.InvoiceDetail", b =>
                {
                    b.HasOne("EntityLayer.Concrete.CreditCard", "CreditCard")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Profile", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Language", "Language")
                        .WithMany("Profiles")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.MaturityRating", "MaturityRating")
                        .WithMany("Profiles")
                        .HasForeignKey("MaturityRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.SubtitleAppearance", "SubtitleAppearance")
                        .WithMany("Profiles")
                        .HasForeignKey("SubtitleAppearanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("MaturityRating");

                    b.Navigation("SubtitleAppearance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfileCommunicationSetting", b =>
                {
                    b.HasOne("EntityLayer.Concrete.CommunicationSetting", "CommunicationSetting")
                        .WithMany("ProfileCommunicationSettings")
                        .HasForeignKey("CommunicationSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Profile", "Profile")
                        .WithMany("ProfileCommunicationSettings")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationSetting");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfileContent", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Content", "Content")
                        .WithMany("ProfileContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Profile", "Profile")
                        .WithMany("ProfileContents")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfilePlaybackSetting", b =>
                {
                    b.HasOne("EntityLayer.Concrete.PlaybackSetting", "PlaybackSetting")
                        .WithMany("ProfilePlaybackSettings")
                        .HasForeignKey("PlaybackSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Profile", "Profile")
                        .WithMany("ProfilePlaybackSettings")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaybackSetting");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfileVideoRating", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Profile", "Profile")
                        .WithMany("ProfileVideoRatings")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Video", "Video")
                        .WithMany("ProfileVideoRatings")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProfileVideoWatching", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Profile", "Profile")
                        .WithMany("ProfileVideoWatchings")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Video", "Video")
                        .WithMany("ProfileVideoWatchings")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Shadow", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Color", "Color")
                        .WithMany("Shadows")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StyleContent", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Content", "Content")
                        .WithMany("StyleContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Style", "Style")
                        .WithMany("StyleContents")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SubtitleAppearance", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Font", "Font")
                        .WithMany("SubtitleAppearances")
                        .HasForeignKey("FontId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Shadow", "Shadow")
                        .WithMany("SubtitleAppearances")
                        .HasForeignKey("ShadowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.TextSize", "TextSize")
                        .WithMany("SubtitleAppearances")
                        .HasForeignKey("TextSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Font");

                    b.Navigation("Shadow");

                    b.Navigation("TextSize");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TypeContent", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Content", "Content")
                        .WithMany("TypeContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Type", "Type")
                        .WithMany("TypeContents")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Packet", "Packet")
                        .WithMany("User")
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Video", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Category", "Category")
                        .WithMany("Videos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Content", "Content")
                        .WithMany("Videos")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Language", "Language")
                        .WithMany("Videos")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Content");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("EntityLayer.Concrete.VideoLanguage", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Language", "Language")
                        .WithMany("VideoLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Video", "Video")
                        .WithMany("VideoLanguages")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Cast", b =>
                {
                    b.Navigation("CastTitles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CastTitle", b =>
                {
                    b.Navigation("ContentCastTitles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Category", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Color", b =>
                {
                    b.Navigation("Fonts");

                    b.Navigation("Shadows");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommunicationSetting", b =>
                {
                    b.Navigation("ProfileCommunicationSettings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Content", b =>
                {
                    b.Navigation("ContentCastTitles");

                    b.Navigation("GenreContents");

                    b.Navigation("ProfileContents");

                    b.Navigation("StyleContents");

                    b.Navigation("TypeContents");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CreditCard", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Font", b =>
                {
                    b.Navigation("SubtitleAppearances");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Genre", b =>
                {
                    b.Navigation("GenreContents");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Language", b =>
                {
                    b.Navigation("Profiles");

                    b.Navigation("VideoLanguages");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MaturityRating", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Packet", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PlaybackSetting", b =>
                {
                    b.Navigation("ProfilePlaybackSettings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Profile", b =>
                {
                    b.Navigation("ProfileCommunicationSettings");

                    b.Navigation("ProfileContents");

                    b.Navigation("ProfilePlaybackSettings");

                    b.Navigation("ProfileVideoRatings");

                    b.Navigation("ProfileVideoWatchings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Shadow", b =>
                {
                    b.Navigation("SubtitleAppearances");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Style", b =>
                {
                    b.Navigation("StyleContents");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SubtitleAppearance", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TextSize", b =>
                {
                    b.Navigation("SubtitleAppearances");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Title", b =>
                {
                    b.Navigation("CastTitles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Type", b =>
                {
                    b.Navigation("TypeContents");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.Navigation("CreditCards");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Video", b =>
                {
                    b.Navigation("ProfileVideoRatings");

                    b.Navigation("ProfileVideoWatchings");

                    b.Navigation("VideoLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
